#!/usr/bin/env bash
set -e

ENV=${ENV:-"production"} # default environment
TARGET="build"           # default build target

# TODO require '=' in long format arguments?
# Stolen from http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# > 0 ]]
do
  key="$1"
  
  case $key in
    -e|--env)
      ENV="$2"
      shift # past argument
      ;;
    -t|--target)
      TARGET="$TARGET:$1"
      shift # past argument
      ;;
    -h|--help)
      echo "Usage: ${0} [-e|--env <environment>] [-t|--target <target>]"
      exit 0
      ;;
    *)
      # assume any left over argument is target.
      # TODO not sure if this is works properly...
      TARGET="$TARGET:$1"
      ;;
  esac
  shift # past argument or value
done

echo "Using ${ENV} environment"

if [[ -f package.json ]]; then
  echo "Running npm prune..."
  # we don't want do prune devDependencies even if NODE_ENV=production
  # since gulp might need them...
  # TODO is there a yarn equivalent to npm prune?
  time npm prune --production=false --color false
  # TODO or default to yarn and only run npm if there a shrinkwrap
  # (and no yarn.lock)
  if [[ -f yarn.lock ]]; then
    echo "Running yarn..."
    # TODO --no-color
    time yarn install --no-emoji --no-progress --force
  else
    echo "Running npm install..."
    time npm install --color false
  fi
else
  echo "Skipping npm (no package.json found)..."
fi

if [[ -f bower.json ]]; then
  echo "Running bower prune..."
  time bower prune --allow-root --color false
  echo "Running bower install..."
  time bower install --allow-root --color false
else
  echo "Skipping bower (no bower.json found)..."
fi

if [[ -f gulpfile.js ]]; then
  GULP="$(npm bin)/gulp"
  if [[ ! -x $GULP ]]; then
    echo "ERROR: Found gulpfile but no gulp executable (perhaps you forgot to add gulp as a devDependency?)"
    exit 100
  fi

  if [[ ! $($GULP --tasks-simple | grep "^${TARGET}$") ]]; then
    echo "WARNING: Found gulpfile but no \"$TARGET\" task, nothing to run..."
  else
    # Run gulp `build` task or `build:foobar` task if target `foobar` was
    # specified.
    echo "Running gulp ${TARGET} task..."
    time $GULP --no-color "$TARGET" --env "$ENV"
  fi
else
  echo "Skipping gulp (no gulpfile.js found)..."
fi

if [[ -f package.json && $(npm run --porcelain | grep "^${TARGET}:") ]]; then
  echo "Running npm ${TARGET} script..."
  time npm run $TARGET
else
  echo "Skipping npm run script (no package.json or build script found)..."
fi
